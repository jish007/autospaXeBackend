#include <SoftwareSerial.h>
#include <Wire.h>
#include <Servo.h>
#include <LiquidCrystal_I2C.h>

#define DEBUG true

SoftwareSerial esp8266(2, 3);  // RX, TX for ESP8266

String AP = "motorola_edge_20";   // Wi-Fi Name
String PASS = "gokul@123";       // Wi-Fi Password

const int pirPin = 7;  // PIR sensor pin
const int pirExitPin = 12;

LiquidCrystal_I2C lcd(0x27, 16, 2);


Servo myServo;
Servo myExitServo;
int servoPin = 9;
int servoExitPin = 10;

bool barrierUp = false;
bool barrierExitUp = false;

void setup() {
  Serial.begin(9600);
  esp8266.begin(115200);  // Start at 115200

  delay(1000);
  esp8266.println("AT+UART_DEF=9600,8,1,0,0"); // Change ESP8266 baud rate
  delay(1000);

  esp8266.begin(9600);  // Restart at 9600

  pinMode(pirPin, INPUT);
  pinMode(pirExitPin, INPUT);

  myServo.attach(servoPin);       
  myServo.write(0);  // Start with barrier down
  myExitServo.attach(servoExitPin);
  myExitServo.write(0);

  lcd.init();
  lcd.backlight();

  // Reset the ESP8266 module
  sendCommand("AT+RST\r\n", 2000, DEBUG);
  delay(2000);

  // Set the ESP8266 to station mode
  sendCommand("AT+CWMODE=1\r\n", 1000, DEBUG);
  delay(1000);

  // Connect to the specified WiFi network
  sendCommand("AT+CWJAP=\"" + AP + "\",\"" + PASS + "\"\r\n", 5000, DEBUG);
  delay(10000);  // Wait for connection to stabilize

  // Get the IP address
  sendCommand("AT+CIFSR\r\n", 1000, DEBUG);
  delay(1000);

  // Enable multiple connections
  sendCommand("AT+CIPMUX=0\r\n", 1000, DEBUG);
  delay(1000);

  Serial.println("ESP8266 Ready");
}

void loop() {
  int pirStatus = getSensorData();
  int pirExitStatus = getExitSensorData();

  if (pirExitStatus == 1){
    if (!barrierExitUp) {
      moveExitBarrier(90);
      barrierExitUp = true;
      delay(5000); 
      moveExitBarrier(0);  
      barrierExitUp = false;
    }
  }

  if (pirStatus == 1) {
    String data = "status=" + String(pirStatus);  // Data in URL-encoded format
    sendHttpPost("192.168.74.41", "/updateSensor", 9000, data);
  }
  delay(2000);
}

int getExitSensorData() {
  int pirStatus = digitalRead(pirExitPin);  
  Serial.print("Exit PIR Status: ");
  Serial.println(pirStatus);
  return pirStatus;
}

int getSensorData() {
  int pirStatus = digitalRead(pirPin);  
  Serial.print("PIR Status: ");
  Serial.println(pirStatus);
  return pirStatus;
}

void sendHttpPost(String server, String resource, int port, String data) {
  sendCommand("AT+CIPSTART=\"TCP\",\"" + server + "\"," + String(port) + "\r\n", 3000, DEBUG);
  delay(2000);

  String httpRequest = "POST " + resource + " HTTP/1.1\r\n" +
                       "Host: " + server + "\r\n" +
                       "Content-Type: application/x-www-form-urlencoded\r\n" +
                       "Content-Length: " + String(data.length()) + "\r\n\r\n" +
                       data;

  sendCommand("AT+CIPSEND=" + String(httpRequest.length()) + "\r\n", 1000, DEBUG);
  delay(100);

  String response = sendCommand(httpRequest, 5000, DEBUG);
  delay(2000);

  Serial.println("Response: " + response);

  // Extract numeric value from response
  String extractedResponse = extractNumericResponse(response);

  Serial.println("Extracted Response: " + extractedResponse);
  
  // Ensure extracted response is clean
  extractedResponse.trim();  

  if (extractedResponse.startsWith("1")) {  
        if (!barrierUp) {
            String names = extractedResponse.substring(1);
            displayMessage("Welcome :)",names);
            moveBarrier(90);
            barrierUp = true;
            delay(5000); 
            moveBarrier(0);  
            barrierUp = false;
        }
    } else if (extractedResponse[0] == 'u' && extractedResponse[1] == 'p') {
        if (!barrierUp) {
            String slot = extractedResponse.substring(2);
            displayMessage("Welcome :)","Slot: " + slot);
            moveBarrier(90);
            barrierUp = true;
            delay(5000);
            moveBarrier(0);
            barrierUp = false;
        }
    } else if (extractedResponse.startsWith("0")) {  
        displayMessage("Sorry :(", "Space Full");
    } else {  
        Serial.println("Invalid Response");
    }
  sendCommand("AT+CIPCLOSE\r\n", 1000, DEBUG);
}

void moveExitBarrier(int angle) {
    for (int pos = (angle == 90 ? 0 : 90); (angle == 90 ? pos <= 90 : pos >= 0); pos += (angle == 90 ? 1 : -1)) {
        myExitServo.write(pos);
        delay(15);
    }
}

void moveBarrier(int angle) {
    for (int pos = (angle == 90 ? 0 : 90); (angle == 90 ? pos <= 90 : pos >= 0); pos += (angle == 90 ? 1 : -1)) {
        myServo.write(pos);
        delay(15);
    }
}

void displayMessage(String line1, String line2) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(line1);
    lcd.setCursor(0, 1);
    lcd.print(line2);
}

String containsAlphanumeric(String response) {
  for (int i = 0; i < response.length(); i++) {
    if (isAlpha(response[i]) && i + 1 < response.length() && isDigit(response[i + 1])) {
      return response.substring(i, i + 2);  // Extract the alphanumeric value (e.g., "A1")
    }
  }
  return "";  // Return empty string if no alphanumeric value found
}

String extractNumericResponse(String response) {
  int pos = response.lastIndexOf("\r\n\r\n");  // Find end of headers
  if (pos != -1) {
    String body = response.substring(pos + 4);  // Extract response body
    body.trim();  // Remove whitespace/newlines

    if (body.length() > 0) {
      // If body contains alphanumeric characters, return directly
      if (containsAlphanumeric(body).length() > 0) {
        return body;
      }
      
      // If body starts with a digit, return the numeric value
      if (isDigit(body[0])) {
        return body;
      }
    }
  }

  return "Invalid";  // If no valid response is found
}


// Function to send AT commands to ESP8266
String sendCommand(String command, const int timeout, boolean debug) {
  String response = "";

  esp8266.print(command);  // Send the command to ESP8266

  long int time = millis();
  while ((time + timeout) > millis()) {
    while (esp8266.available()) {
      char c = esp8266.read();  // Read character
      response += c;
    }
  }

  if (debug) {
    Serial.print(response);
  }
  return response;
}
